name: PR Check

on:
  pull_request:
    branches: [ main ]

jobs:
  check:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
      

      
      - name: Install frontend dependencies
        run: npm ci
      
      - name: Check TypeScript
        run: |
          echo "Running TypeScript check..."
          npx tsc --noEmit
          echo "TypeScript check completed"
      
      - name: Lint frontend
        run: npm run lint
        continue-on-error: true
      
      - name: Check Rust formatting
        run: cd src-tauri && cargo fmt --all -- --check
      
      - name: Run Clippy
        run: cd src-tauri && cargo clippy --all-targets --all-features -- -D warnings
      
      - name: Build frontend
        run: |
          echo "Current working directory: $(pwd)"
          echo "Directory contents before build:"
          ls -la
          echo "Starting frontend build..."
          npm run build
          echo "Build command exit code: $?"
          echo "Directory contents after build:"
          ls -la
      
      - name: Verify dist directory exists
        run: |
          if [ ! -d "dist" ]; then
            echo "Error: dist directory not found after frontend build"
            echo "Checking for common build output directories:"
            find . -name "dist*" -type d 2>/dev/null || echo "No dist directories found"
            find . -name "build*" -type d 2>/dev/null || echo "No build directories found"
            exit 1
          fi
          echo "Success: dist directory found"
          echo "dist directory contents:"
          ls -la dist/
      
      - name: Build Rust (check compilation)
        run: |
          echo "Checking that dist directory exists from src-tauri perspective..."
          ls -la dist/ || echo "dist not found in root"
          cd src-tauri
          echo "Current directory: $(pwd)"
          echo "Looking for ../dist from src-tauri directory..."
          ls -la ../dist/ || echo "../dist not found from src-tauri"
          echo "Running cargo build..."
          cargo build